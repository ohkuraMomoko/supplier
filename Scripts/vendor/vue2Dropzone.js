"use strict"; function _slicedToArray(e, t) { return _arrayWithHoles(e) || _iterableToArrayLimit(e, t) || _unsupportedIterableToArray(e, t) || _nonIterableRest() } function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } function _unsupportedIterableToArray(e, t) { if (e) { if ("string" == typeof e) return _arrayLikeToArray(e, t); var n = Object.prototype.toString.call(e).slice(8, -1); return "Object" === n && e.constructor && (n = e.constructor.name), "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? _arrayLikeToArray(e, t) : void 0 } } function _arrayLikeToArray(e, t) { (null == t || t > e.length) && (t = e.length); for (var n = 0, i = new Array(t); n < t; n++)i[n] = e[n]; return i } function _iterableToArrayLimit(e, t) { if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) { var n = [], i = !0, r = !1, o = void 0; try { for (var s, a = e[Symbol.iterator](); !(i = (s = a.next()).done) && (n.push(s.value), !t || n.length !== t); i = !0); } catch (e) { r = !0, o = e } finally { try { i || null == a.return || a.return() } finally { if (r) throw o } } return n } } function _arrayWithHoles(e) { if (Array.isArray(e)) return e } function _instanceof(e, t) { return null != t && "undefined" != typeof Symbol && t[Symbol.hasInstance] ? !!t[Symbol.hasInstance](e) : e instanceof t } function _typeof(e) { return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e })(e) } !function (e, t) { "object" == ("undefined" == typeof exports ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = e || self).vue2Dropzone = t() }(void 0, function () { var e, t = (function (e) { var t = function () { function e(e, t) { for (var n = 0; n < t.length; n++) { var i = t[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } } return function (t, n, i) { return n && e(t.prototype, n), i && e(t, i), t } }(); function n(e, t) { if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != _typeof(t) && "function" != typeof t ? e : t } function i(e, t) { if (!_instanceof(e, t)) throw new TypeError("Cannot call a class as a function") } var r = function () { function e() { i(this, e) } return t(e, [{ key: "on", value: function (e, t) { return this._callbacks = this._callbacks || {}, this._callbacks[e] || (this._callbacks[e] = []), this._callbacks[e].push(t), this } }, { key: "emit", value: function (e) { this._callbacks = this._callbacks || {}; var t = this._callbacks[e]; if (t) { for (var n = arguments.length, i = Array(n > 1 ? n - 1 : 0), r = 1; r < n; r++)i[r - 1] = arguments[r]; for (var o = 0, s = s = t; !(o >= s.length);)s[o++].apply(this, i) } return this } }, { key: "off", value: function (e, t) { if (!this._callbacks || 0 === arguments.length) return this._callbacks = {}, this; var n = this._callbacks[e]; if (!n) return this; if (1 === arguments.length) return delete this._callbacks[e], this; for (var i = 0; i < n.length; i++)if (n[i] === t) { n.splice(i, 1); break } return this } }]), e }(), o = function (e) { function o(e, t) { i(this, o); var r, s = n(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this)), a = void 0; if (s.element = e, s.version = o.version, s.defaultOptions.previewTemplate = s.defaultOptions.previewTemplate.replace(/\n*/g, ""), s.clickableElements = [], s.listeners = [], s.files = [], "string" == typeof s.element && (s.element = document.querySelector(s.element)), !s.element || null == s.element.nodeType) throw new Error("Invalid dropzone element."); if (s.element.dropzone) throw new Error("Dropzone already attached."); o.instances.push(s), s.element.dropzone = s; var l, u = null != (r = o.optionsForElement(s.element)) ? r : {}; if (s.options = o.extend({}, s.defaultOptions, u, null != t ? t : {}), s.options.forceFallback || !o.isBrowserSupported()) return l = s.options.fallback.call(s), n(s, l); if (null == s.options.url && (s.options.url = s.element.getAttribute("action")), !s.options.url) throw new Error("No URL provided."); if (s.options.acceptedFiles && s.options.acceptedMimeTypes) throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated."); if (s.options.uploadMultiple && s.options.chunking) throw new Error("You cannot set both: uploadMultiple and chunking."); return s.options.acceptedMimeTypes && (s.options.acceptedFiles = s.options.acceptedMimeTypes, delete s.options.acceptedMimeTypes), null != s.options.renameFilename && (s.options.renameFile = function (e) { return s.options.renameFilename.call(s, e.name, e) }), s.options.method = s.options.method.toUpperCase(), (a = s.getExistingFallback()) && a.parentNode && a.parentNode.removeChild(a), !1 !== s.options.previewsContainer && (s.options.previewsContainer ? s.previewsContainer = o.getElement(s.options.previewsContainer, "previewsContainer") : s.previewsContainer = s.element), s.options.clickable && (!0 === s.options.clickable ? s.clickableElements = [s.element] : s.clickableElements = o.getElements(s.options.clickable, "clickable")), s.init(), s } return function (e, t) { if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + _typeof(t)); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t) }(o, r), t(o, null, [{ key: "initClass", value: function () { this.prototype.Emitter = r, this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"], this.prototype.defaultOptions = { url: null, method: "post", withCredentials: !1, timeout: 3e4, parallelUploads: 2, uploadMultiple: !1, chunking: !1, forceChunking: !1, chunkSize: 2e6, parallelChunkUploads: !1, retryChunks: !1, retryChunksLimit: 3, maxFilesize: 256, paramName: "file", createImageThumbnails: !0, maxThumbnailFilesize: 10, thumbnailWidth: 120, thumbnailHeight: 120, thumbnailMethod: "crop", resizeWidth: null, resizeHeight: null, resizeMimeType: null, resizeQuality: .8, resizeMethod: "contain", filesizeBase: 1e3, maxFiles: null, headers: null, clickable: !0, ignoreHiddenFiles: !0, acceptedFiles: null, acceptedMimeTypes: null, autoProcessQueue: !0, autoQueue: !0, addRemoveLinks: !1, previewsContainer: null, hiddenInputContainer: "body", capture: null, renameFilename: null, renameFile: null, forceFallback: !1, dictDefaultMessage: "Drop files here to upload", dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.", dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.", dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.", dictInvalidFileType: "You can't upload files of this type.", dictResponseError: "Server responded with {{statusCode}} code.", dictCancelUpload: "Cancel upload", dictUploadCanceled: "Upload canceled.", dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?", dictRemoveFile: "Remove file", dictRemoveFileConfirmation: null, dictMaxFilesExceeded: "You can not upload any more files.", dictFileSizeUnits: { tb: "TB", gb: "GB", mb: "MB", kb: "KB", b: "b" }, init: function () { }, params: function (e, t, n) { if (n) return { dzuuid: n.file.upload.uuid, dzchunkindex: n.index, dztotalfilesize: n.file.size, dzchunksize: this.options.chunkSize, dztotalchunkcount: n.file.upload.totalChunkCount, dzchunkbyteoffset: n.index * this.options.chunkSize } }, accept: function (e, t) { return t() }, chunksUploaded: function (e, t) { t() }, fallback: function () { var e = void 0; this.element.className = this.element.className + " dz-browser-not-supported"; for (var t = 0, n = n = this.element.getElementsByTagName("div"); !(t >= n.length);) { var i = n[t++]; if (/(^| )dz-message($| )/.test(i.className)) { e = i, i.className = "dz-message"; break } } e || (e = o.createElement('<div class="dz-message"><span></span></div>'), this.element.appendChild(e)); var r = e.getElementsByTagName("span")[0]; return r && (null != r.textContent ? r.textContent = this.options.dictFallbackMessage : null != r.innerText && (r.innerText = this.options.dictFallbackMessage)), this.element.appendChild(this.getFallbackForm()) }, resize: function (e, t, n, i) { var r = { srcX: 0, srcY: 0, srcWidth: e.width, srcHeight: e.height }, o = e.width / e.height; null == t && null == n ? (t = r.srcWidth, n = r.srcHeight) : null == t ? t = n * o : null == n && (n = t / o); var s = (t = Math.min(t, r.srcWidth)) / (n = Math.min(n, r.srcHeight)); if (r.srcWidth > t || r.srcHeight > n) if ("crop" === i) o > s ? (r.srcHeight = e.height, r.srcWidth = r.srcHeight * s) : (r.srcWidth = e.width, r.srcHeight = r.srcWidth / s); else { if ("contain" !== i) throw new Error("Unknown resizeMethod '" + i + "'"); o > s ? n = t / o : t = n * o } return r.srcX = (e.width - r.srcWidth) / 2, r.srcY = (e.height - r.srcHeight) / 2, r.trgWidth = t, r.trgHeight = n, r }, transformFile: function (e, t) { return (this.options.resizeWidth || this.options.resizeHeight) && e.type.match(/image.*/) ? this.resizeImage(e, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, t) : t(e) }, previewTemplate: '<div class="dz-preview dz-file-preview">\n  <div class="dz-image"><img data-dz-thumbnail /></div>\n  <div class="dz-details">\n    <div class="dz-size"><span data-dz-size></span></div>\n    <div class="dz-filename"><span data-dz-name></span></div>\n  </div>\n  <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>\n  <div class="dz-error-message"><span data-dz-errormessage></span></div>\n  <div class="dz-success-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Check</title>\n      <defs></defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF" sketch:type="MSShapeGroup"></path>\n      </g>\n    </svg>\n  </div>\n  <div class="dz-error-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Error</title>\n      <defs></defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <g id="Check-+-Oval-2" sketch:type="MSLayerGroup" stroke="#747474" stroke-opacity="0.198794158" fill="#FFFFFF" fill-opacity="0.816519475">\n          <path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" sketch:type="MSShapeGroup"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>', drop: function (e) { return this.element.classList.remove("dz-drag-hover") }, dragstart: function (e) { }, dragend: function (e) { return this.element.classList.remove("dz-drag-hover") }, dragenter: function (e) { return this.element.classList.add("dz-drag-hover") }, dragover: function (e) { return this.element.classList.add("dz-drag-hover") }, dragleave: function (e) { return this.element.classList.remove("dz-drag-hover") }, paste: function (e) { }, reset: function () { return this.element.classList.remove("dz-started") }, addedfile: function (e) { var t = this; if (this.element === this.previewsContainer && this.element.classList.add("dz-started"), this.previewsContainer) { e.previewElement = o.createElement(this.options.previewTemplate.trim()), e.previewTemplate = e.previewElement, this.previewsContainer.appendChild(e.previewElement); for (var n = 0, i = i = e.previewElement.querySelectorAll("[data-dz-name]"); !(n >= i.length);) { var r = i[n++]; r.textContent = e.name } for (var s = 0, a = a = e.previewElement.querySelectorAll("[data-dz-size]"); !(s >= a.length);)(r = a[s++]).innerHTML = this.filesize(e.size); this.options.addRemoveLinks && (e._removeLink = o.createElement('<a class="dz-remove" href="javascript:undefined;" data-dz-remove>' + this.options.dictRemoveFile + "</a>"), e.previewElement.appendChild(e._removeLink)); for (var l = function (n) { return n.preventDefault(), n.stopPropagation(), e.status === o.UPLOADING ? o.confirm(t.options.dictCancelUploadConfirmation, function () { return t.removeFile(e) }) : t.options.dictRemoveFileConfirmation ? o.confirm(t.options.dictRemoveFileConfirmation, function () { return t.removeFile(e) }) : t.removeFile(e) }, u = 0, d = d = e.previewElement.querySelectorAll("[data-dz-remove]"); !(u >= d.length);)d[u++].addEventListener("click", l) } }, removedfile: function (e) { return null != e.previewElement && null != e.previewElement.parentNode && e.previewElement.parentNode.removeChild(e.previewElement), this._updateMaxFilesReachedClass() }, thumbnail: function (e, t) { if (e.previewElement) { e.previewElement.classList.remove("dz-file-preview"); for (var n = 0, i = i = e.previewElement.querySelectorAll("[data-dz-thumbnail]"); !(n >= i.length);) { var r = i[n++]; r.alt = e.name, r.src = t } return setTimeout(function () { return e.previewElement.classList.add("dz-image-preview") }, 1) } }, error: function (e, t) { if (e.previewElement) { e.previewElement.classList.add("dz-error"), "String" != typeof t && t.error && (t = t.error); for (var n = 0, i = i = e.previewElement.querySelectorAll("[data-dz-errormessage]"); !(n >= i.length);)i[n++].textContent = t } }, errormultiple: function () { }, processing: function (e) { if (e.previewElement && (e.previewElement.classList.add("dz-processing"), e._removeLink)) return e._removeLink.innerHTML = this.options.dictCancelUpload }, processingmultiple: function () { }, uploadprogress: function (e, t, n) { if (e.previewElement) for (var i = 0, r = r = e.previewElement.querySelectorAll("[data-dz-uploadprogress]"); !(i >= r.length);) { var o = r[i++]; "PROGRESS" === o.nodeName ? o.value = t : o.style.width = t + "%" } }, totaluploadprogress: function () { }, sending: function () { }, sendingmultiple: function () { }, success: function (e) { if (e.previewElement) return e.previewElement.classList.add("dz-success") }, successmultiple: function () { }, canceled: function (e) { return this.emit("error", e, this.options.dictUploadCanceled) }, canceledmultiple: function () { }, complete: function (e) { if (e._removeLink && (e._removeLink.innerHTML = this.options.dictRemoveFile), e.previewElement) return e.previewElement.classList.add("dz-complete") }, completemultiple: function () { }, maxfilesexceeded: function () { }, maxfilesreached: function () { }, queuecomplete: function () { }, addedfiles: function () { } }, this.prototype._thumbnailQueue = [], this.prototype._processingThumbnail = !1 } }, { key: "extend", value: function (e) { for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)n[i - 1] = arguments[i]; for (var r = 0, o = o = n; !(r >= o.length);) { var s = o[r++]; for (var a in s) { var l = s[a]; e[a] = l } } return e } }]), t(o, [{ key: "getAcceptedFiles", value: function () { return this.files.filter(function (e) { return e.accepted }).map(function (e) { return e }) } }, { key: "getRejectedFiles", value: function () { return this.files.filter(function (e) { return !e.accepted }).map(function (e) { return e }) } }, { key: "getFilesWithStatus", value: function (e) { return this.files.filter(function (t) { return t.status === e }).map(function (e) { return e }) } }, { key: "getQueuedFiles", value: function () { return this.getFilesWithStatus(o.QUEUED) } }, { key: "getUploadingFiles", value: function () { return this.getFilesWithStatus(o.UPLOADING) } }, { key: "getAddedFiles", value: function () { return this.getFilesWithStatus(o.ADDED) } }, { key: "getActiveFiles", value: function () { return this.files.filter(function (e) { return e.status === o.UPLOADING || e.status === o.QUEUED }).map(function (e) { return e }) } }, { key: "init", value: function () { var e = this; "form" === this.element.tagName && this.element.setAttribute("enctype", "multipart/form-data"), this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message") && this.element.appendChild(o.createElement('<div class="dz-default dz-message"><span>' + this.options.dictDefaultMessage + "</span></div>")), this.clickableElements.length && function t() { return e.hiddenFileInput && e.hiddenFileInput.parentNode.removeChild(e.hiddenFileInput), e.hiddenFileInput = document.createElement("input"), e.hiddenFileInput.setAttribute("type", "file"), (null === e.options.maxFiles || e.options.maxFiles > 1) && e.hiddenFileInput.setAttribute("multiple", "multiple"), e.hiddenFileInput.className = "dz-hidden-input", null !== e.options.acceptedFiles && e.hiddenFileInput.setAttribute("accept", e.options.acceptedFiles), null !== e.options.capture && e.hiddenFileInput.setAttribute("capture", e.options.capture), e.hiddenFileInput.style.visibility = "hidden", e.hiddenFileInput.style.position = "absolute", e.hiddenFileInput.style.top = "0", e.hiddenFileInput.style.left = "0", e.hiddenFileInput.style.height = "0", e.hiddenFileInput.style.width = "0", o.getElement(e.options.hiddenInputContainer, "hiddenInputContainer").appendChild(e.hiddenFileInput), e.hiddenFileInput.addEventListener("change", function () { var n = e.hiddenFileInput.files; if (n.length) for (var i = 0, r = r = n; !(i >= r.length);) { var o = r[i++]; e.addFile(o) } return e.emit("addedfiles", n), t() }) }(), this.URL = null !== window.URL ? window.URL : window.webkitURL; for (var t = 0, n = n = this.events; !(t >= n.length);) { var i = n[t++]; this.on(i, this.options[i]) } this.on("uploadprogress", function () { return e.updateTotalUploadProgress() }), this.on("removedfile", function () { return e.updateTotalUploadProgress() }), this.on("canceled", function (t) { return e.emit("complete", t) }), this.on("complete", function (t) { if (0 === e.getAddedFiles().length && 0 === e.getUploadingFiles().length && 0 === e.getQueuedFiles().length) return setTimeout(function () { return e.emit("queuecomplete") }, 0) }); var r = function (e) { return e.stopPropagation(), e.preventDefault ? e.preventDefault() : e.returnValue = !1 }; return this.listeners = [{ element: this.element, events: { dragstart: function (t) { return e.emit("dragstart", t) }, dragenter: function (t) { return r(t), e.emit("dragenter", t) }, dragover: function (t) { var n = void 0; try { n = t.dataTransfer.effectAllowed } catch (e) { } return t.dataTransfer.dropEffect = "move" === n || "linkMove" === n ? "move" : "copy", r(t), e.emit("dragover", t) }, dragleave: function (t) { return e.emit("dragleave", t) }, drop: function (t) { return r(t), e.drop(t) }, dragend: function (t) { return e.emit("dragend", t) } } }], this.clickableElements.forEach(function (t) { return e.listeners.push({ element: t, events: { click: function (n) { return (t !== e.element || n.target === e.element || o.elementInside(n.target, e.element.querySelector(".dz-message"))) && e.hiddenFileInput.click(), !0 } } }) }), this.enable(), this.options.init.call(this) } }, { key: "destroy", value: function () { return this.disable(), this.removeAllFiles(!0), (null != this.hiddenFileInput ? this.hiddenFileInput.parentNode : void 0) && (this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput), this.hiddenFileInput = null), delete this.element.dropzone, o.instances.splice(o.instances.indexOf(this), 1) } }, { key: "updateTotalUploadProgress", value: function () { var e = void 0, t = 0, n = 0; if (this.getActiveFiles().length) { for (var i = 0, r = r = this.getActiveFiles(); !(i >= r.length);) { var o = r[i++]; t += o.upload.bytesSent, n += o.upload.total } e = 100 * t / n } else e = 100; return this.emit("totaluploadprogress", e, n, t) } }, { key: "_getParamName", value: function (e) { return "function" == typeof this.options.paramName ? this.options.paramName(e) : this.options.paramName + (this.options.uploadMultiple ? "[" + e + "]" : "") } }, { key: "_renameFile", value: function (e) { return "function" != typeof this.options.renameFile ? e.name : this.options.renameFile(e) } }, { key: "getFallbackForm", value: function () { var e, t = void 0; if (e = this.getExistingFallback()) return e; var n = '<div class="dz-fallback">'; this.options.dictFallbackText && (n += "<p>" + this.options.dictFallbackText + "</p>"), n += '<input type="file" name="' + this._getParamName(0) + '" ' + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + ' /><input type="submit" value="Upload!"></div>'; var i = o.createElement(n); return "FORM" !== this.element.tagName ? (t = o.createElement('<form action="' + this.options.url + '" enctype="multipart/form-data" method="' + this.options.method + '"></form>')).appendChild(i) : (this.element.setAttribute("enctype", "multipart/form-data"), this.element.setAttribute("method", this.options.method)), null != t ? t : i } }, { key: "getExistingFallback", value: function () { for (var e = function (e) { for (var t = 0, n = n = e; !(t >= n.length);) { var i = n[t++]; if (/(^| )fallback($| )/.test(i.className)) return i } }, t = ["div", "form"], n = 0; n < t.length; n++) { var i, r = t[n]; if (i = e(this.element.getElementsByTagName(r))) return i } } }, { key: "setupEventListeners", value: function () { return this.listeners.map(function (e) { return function () { var t = []; for (var n in e.events) { var i = e.events[n]; t.push(e.element.addEventListener(n, i, !1)) } return t }() }) } }, { key: "removeEventListeners", value: function () { return this.listeners.map(function (e) { return function () { var t = []; for (var n in e.events) { var i = e.events[n]; t.push(e.element.removeEventListener(n, i, !1)) } return t }() }) } }, { key: "disable", value: function () { var e = this; return this.clickableElements.forEach(function (e) { return e.classList.remove("dz-clickable") }), this.removeEventListeners(), this.disabled = !0, this.files.map(function (t) { return e.cancelUpload(t) }) } }, { key: "enable", value: function () { return delete this.disabled, this.clickableElements.forEach(function (e) { return e.classList.add("dz-clickable") }), this.setupEventListeners() } }, { key: "filesize", value: function (e) { var t = 0, n = "b"; if (e > 0) { for (var i = ["tb", "gb", "mb", "kb", "b"], r = 0; r < i.length; r++) { var o = i[r]; if (e >= Math.pow(this.options.filesizeBase, 4 - r) / 10) { t = e / Math.pow(this.options.filesizeBase, 4 - r), n = o; break } } t = Math.round(10 * t) / 10 } return "<strong>" + t + "</strong> " + this.options.dictFileSizeUnits[n] } }, { key: "_updateMaxFilesReachedClass", value: function () { return null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (this.getAcceptedFiles().length === this.options.maxFiles && this.emit("maxfilesreached", this.files), this.element.classList.add("dz-max-files-reached")) : this.element.classList.remove("dz-max-files-reached") } }, { key: "drop", value: function (e) { if (e.dataTransfer) { this.emit("drop", e); for (var t = [], n = 0; n < e.dataTransfer.files.length; n++)t[n] = e.dataTransfer.files[n]; if (this.emit("addedfiles", t), t.length) { var i = e.dataTransfer.items; i && i.length && null != i[0].webkitGetAsEntry ? this._addFilesFromItems(i) : this.handleFiles(t) } } } }, { key: "paste", value: function (e) { if (null != (null != (t = null != e ? e.clipboardData : void 0) ? function (e) { return e.items }(t) : void 0)) { var t; this.emit("paste", e); var n = e.clipboardData.items; return n.length ? this._addFilesFromItems(n) : void 0 } } }, { key: "handleFiles", value: function (e) { for (var t = 0, n = n = e; !(t >= n.length);) { var i = n[t++]; this.addFile(i) } } }, { key: "_addFilesFromItems", value: function (e) { var t = this; return function () { for (var n = [], i = 0, r = r = e; !(i >= r.length);) { var o, s = r[i++]; null != s.webkitGetAsEntry && (o = s.webkitGetAsEntry()) ? o.isFile ? n.push(t.addFile(s.getAsFile())) : o.isDirectory ? n.push(t._addFilesFromDirectory(o, o.name)) : n.push(void 0) : null == s.getAsFile || null != s.kind && "file" !== s.kind ? n.push(void 0) : n.push(t.addFile(s.getAsFile())) } return n }() } }, { key: "_addFilesFromDirectory", value: function (e, t) { var n = this, i = e.createReader(), r = function (e) { return "log", n = function (t) { return t.log(e) }, null != (t = console) && "function" == typeof t.log ? n(t) : void 0; var t, n }; return function e() { return i.readEntries(function (i) { if (i.length > 0) { for (var r = 0, o = o = i; !(r >= o.length);) { var s = o[r++]; s.isFile ? s.file(function (e) { if (!n.options.ignoreHiddenFiles || "." !== e.name.substring(0, 1)) return e.fullPath = t + "/" + e.name, n.addFile(e) }) : s.isDirectory && n._addFilesFromDirectory(s, t + "/" + s.name) } e() } return null }, r) }() } }, { key: "accept", value: function (e, t) { return this.options.maxFilesize && e.size > 1024 * this.options.maxFilesize * 1024 ? t(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(e.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) : o.isValidFile(e, this.options.acceptedFiles) ? null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (t(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)), this.emit("maxfilesexceeded", e)) : this.options.accept.call(this, e, t) : t(this.options.dictInvalidFileType) } }, { key: "addFile", value: function (e) { var t = this; return e.upload = { uuid: o.uuidv4(), progress: 0, total: e.size, bytesSent: 0, filename: this._renameFile(e), chunked: this.options.chunking && (this.options.forceChunking || e.size > this.options.chunkSize), totalChunkCount: Math.ceil(e.size / this.options.chunkSize) }, this.files.push(e), e.status = o.ADDED, this.emit("addedfile", e), this._enqueueThumbnail(e), this.accept(e, function (n) { return n ? (e.accepted = !1, t._errorProcessing([e], n)) : (e.accepted = !0, t.options.autoQueue && t.enqueueFile(e)), t._updateMaxFilesReachedClass() }) } }, { key: "enqueueFiles", value: function (e) { for (var t = 0, n = n = e; !(t >= n.length);) { var i = n[t++]; this.enqueueFile(i) } return null } }, { key: "enqueueFile", value: function (e) { var t = this; if (e.status !== o.ADDED || !0 !== e.accepted) throw new Error("This file can't be queued because it has already been processed or was rejected."); if (e.status = o.QUEUED, this.options.autoProcessQueue) return setTimeout(function () { return t.processQueue() }, 0) } }, { key: "_enqueueThumbnail", value: function (e) { var t = this; if (this.options.createImageThumbnails && e.type.match(/image.*/) && e.size <= 1024 * this.options.maxThumbnailFilesize * 1024) return this._thumbnailQueue.push(e), setTimeout(function () { return t._processThumbnailQueue() }, 0) } }, { key: "_processThumbnailQueue", value: function () { var e = this; if (!this._processingThumbnail && 0 !== this._thumbnailQueue.length) { this._processingThumbnail = !0; var t = this._thumbnailQueue.shift(); return this.createThumbnail(t, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, !0, function (n) { return e.emit("thumbnail", t, n), e._processingThumbnail = !1, e._processThumbnailQueue() }) } } }, { key: "removeFile", value: function (e) { if (e.status === o.UPLOADING && this.cancelUpload(e), this.files = s(this.files, e), this.emit("removedfile", e), 0 === this.files.length) return this.emit("reset") } }, { key: "removeAllFiles", value: function (e) { null == e && (e = !1); for (var t = 0, n = n = this.files.slice(); !(t >= n.length);) { var i = n[t++]; (i.status !== o.UPLOADING || e) && this.removeFile(i) } return null } }, { key: "resizeImage", value: function (e, t, n, i, r) { var s = this; return this.createThumbnail(e, t, n, i, !0, function (t, n) { if (null == n) return r(e); var i = s.options.resizeMimeType; null == i && (i = e.type); var a = n.toDataURL(i, s.options.resizeQuality); return "image/jpeg" !== i && "image/jpg" !== i || (a = u.restore(e.dataURL, a)), r(o.dataURItoBlob(a)) }) } }, { key: "createThumbnail", value: function (e, t, n, i, r, o) { var s = this, a = new FileReader; return a.onload = function () { if (e.dataURL = a.result, "image/svg+xml" !== e.type) return s.createThumbnailFromUrl(e, t, n, i, r, o); null != o && o(a.result) }, a.readAsDataURL(e) } }, { key: "createThumbnailFromUrl", value: function (e, t, n, i, r, o, s) { var a = this, u = document.createElement("img"); return s && (u.crossOrigin = s), u.onload = function () { var s = function (e) { return e(1) }; return "undefined" != typeof EXIF && null !== EXIF && r && (s = function (e) { return EXIF.getData(u, function () { return e(EXIF.getTag(this, "Orientation")) }) }), s(function (r) { e.width = u.width, e.height = u.height; var s = a.options.resize.call(a, e, t, n, i), d = document.createElement("canvas"), c = d.getContext("2d"); switch (d.width = s.trgWidth, d.height = s.trgHeight, r > 4 && (d.width = s.trgHeight, d.height = s.trgWidth), r) { case 2: c.translate(d.width, 0), c.scale(-1, 1); break; case 3: c.translate(d.width, d.height), c.rotate(Math.PI); break; case 4: c.translate(0, d.height), c.scale(1, -1); break; case 5: c.rotate(.5 * Math.PI), c.scale(1, -1); break; case 6: c.rotate(.5 * Math.PI), c.translate(0, -d.width); break; case 7: c.rotate(.5 * Math.PI), c.translate(d.height, -d.width), c.scale(-1, 1); break; case 8: c.rotate(-.5 * Math.PI), c.translate(-d.height, 0) }l(c, u, null != s.srcX ? s.srcX : 0, null != s.srcY ? s.srcY : 0, s.srcWidth, s.srcHeight, null != s.trgX ? s.trgX : 0, null != s.trgY ? s.trgY : 0, s.trgWidth, s.trgHeight); var p = d.toDataURL("image/png"); if (null != o) return o(p, d) }) }, null != o && (u.onerror = o), u.src = e.dataURL } }, { key: "processQueue", value: function () { var e = this.options.parallelUploads, t = this.getUploadingFiles().length, n = t; if (!(t >= e)) { var i = this.getQueuedFiles(); if (i.length > 0) { if (this.options.uploadMultiple) return this.processFiles(i.slice(0, e - t)); for (; n < e;) { if (!i.length) return; this.processFile(i.shift()), n++ } } } } }, { key: "processFile", value: function (e) { return this.processFiles([e]) } }, { key: "processFiles", value: function (e) { for (var t = 0, n = n = e; !(t >= n.length);) { var i = n[t++]; i.processing = !0, i.status = o.UPLOADING, this.emit("processing", i) } return this.options.uploadMultiple && this.emit("processingmultiple", e), this.uploadFiles(e) } }, { key: "_getFilesWithXhr", value: function (e) { return this.files.filter(function (t) { return t.xhr === e }).map(function (e) { return e }) } }, { key: "cancelUpload", value: function (e) { if (e.status === o.UPLOADING) { for (var t = this._getFilesWithXhr(e.xhr), n = 0, i = i = t; !(n >= i.length);)i[n++].status = o.CANCELED; void 0 !== e.xhr && e.xhr.abort(); for (var r = 0, s = s = t; !(r >= s.length);) { var a = s[r++]; this.emit("canceled", a) } this.options.uploadMultiple && this.emit("canceledmultiple", t) } else e.status !== o.ADDED && e.status !== o.QUEUED || (e.status = o.CANCELED, this.emit("canceled", e), this.options.uploadMultiple && this.emit("canceledmultiple", [e])); if (this.options.autoProcessQueue) return this.processQueue() } }, { key: "resolveOption", value: function (e) { if ("function" == typeof e) { for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)n[i - 1] = arguments[i]; return e.apply(this, n) } return e } }, { key: "uploadFile", value: function (e) { return this.uploadFiles([e]) } }, { key: "uploadFiles", value: function (e) { var t = this; this._transformFiles(e, function (n) { if (e[0].upload.chunked) { var i = e[0], r = n[0]; i.upload.chunks = []; var s = function () { for (var n = 0; void 0 !== i.upload.chunks[n];)n++; if (!(n >= i.upload.totalChunkCount)) { var s = n * t.options.chunkSize, a = Math.min(s + t.options.chunkSize, i.size), l = { name: t._getParamName(0), data: r.webkitSlice ? r.webkitSlice(s, a) : r.slice(s, a), filename: i.upload.filename, chunkIndex: n }; i.upload.chunks[n] = { file: i, index: n, dataBlock: l, status: o.UPLOADING, progress: 0, retries: 0 }, t._uploadData(e, [l]) } }; if (i.upload.finishedChunkUpload = function (n) { var r = !0; n.status = o.SUCCESS, n.dataBlock = null, n.xhr = null; for (var a = 0; a < i.upload.totalChunkCount; a++) { if (void 0 === i.upload.chunks[a]) return s(); i.upload.chunks[a].status !== o.SUCCESS && (r = !1) } r && t.options.chunksUploaded(i, function () { t._finished(e, "", null) }) }, t.options.parallelChunkUploads) for (var a = 0; a < i.upload.totalChunkCount; a++)s(); else s() } else { for (var l = [], u = 0; u < e.length; u++)l[u] = { name: t._getParamName(u), data: n[u], filename: e[u].upload.filename }; t._uploadData(e, l) } }) } }, { key: "_getChunk", value: function (e, t) { for (var n = 0; n < e.upload.totalChunkCount; n++)if (void 0 !== e.upload.chunks[n] && e.upload.chunks[n].xhr === t) return e.upload.chunks[n] } }, { key: "_uploadData", value: function (e, t) { for (var n = this, i = new XMLHttpRequest, r = 0, s = s = e; !(r >= s.length);)s[r++].xhr = i; e[0].upload.chunked && (e[0].upload.chunks[t[0].chunkIndex].xhr = i); var a = this.resolveOption(this.options.method, e), l = this.resolveOption(this.options.url, e); i.open(a, l, !0), i.timeout = this.resolveOption(this.options.timeout, e), i.withCredentials = !!this.options.withCredentials, i.onload = function (t) { n._finishedUploading(e, i, t) }, i.onerror = function () { n._handleUploadError(e, i) }, (null != i.upload ? i.upload : i).onprogress = function (t) { return n._updateFilesUploadProgress(e, i, t) }; var u = { Accept: "application/json", "Cache-Control": "no-cache", "X-Requested-With": "XMLHttpRequest" }; for (var d in this.options.headers && o.extend(u, this.options.headers), u) { var c = u[d]; c && i.setRequestHeader(d, c) } var p = new FormData; if (this.options.params) { var h = this.options.params; for (var f in "function" == typeof h && (h = h.call(this, e, i, e[0].upload.chunked ? this._getChunk(e[0], i) : null)), h) { var m = h[f]; p.append(f, m) } } for (var v = 0, g = g = e; !(v >= g.length);) { var y = g[v++]; this.emit("sending", y, i, p) } this.options.uploadMultiple && this.emit("sendingmultiple", e, i, p), this._addFormElementData(p); for (var b = 0; b < t.length; b++) { var k = t[b]; p.append(k.name, k.data, k.filename) } this.submitRequest(i, p, e) } }, { key: "_transformFiles", value: function (e, t) { for (var n = this, i = [], r = 0, o = function (o) { n.options.transformFile.call(n, e[o], function (n) { i[o] = n, ++r === e.length && t(i) }) }, s = 0; s < e.length; s++)o(s) } }, { key: "_addFormElementData", value: function (e) { if ("FORM" === this.element.tagName) for (var t = 0, n = n = this.element.querySelectorAll("input, textarea, select, button"); !(t >= n.length);) { var i = n[t++], r = i.getAttribute("name"), o = i.getAttribute("type"); if (o && (o = o.toLowerCase()), null != r) if ("SELECT" === i.tagName && i.hasAttribute("multiple")) for (var s = 0, a = a = i.options; !(s >= a.length);) { var l = a[s++]; l.selected && e.append(r, l.value) } else (!o || "checkbox" !== o && "radio" !== o || i.checked) && e.append(r, i.value) } } }, { key: "_updateFilesUploadProgress", value: function (e, t, n) { var i = void 0; if (void 0 !== n) { if (i = 100 * n.loaded / n.total, e[0].upload.chunked) { var r = e[0], o = this._getChunk(r, t); o.progress = i, o.total = n.total, o.bytesSent = n.loaded, r.upload.progress = 0, r.upload.total = 0, r.upload.bytesSent = 0; for (var s = 0; s < r.upload.totalChunkCount; s++)void 0 !== r.upload.chunks[s] && void 0 !== r.upload.chunks[s].progress && (r.upload.progress += r.upload.chunks[s].progress, r.upload.total += r.upload.chunks[s].total, r.upload.bytesSent += r.upload.chunks[s].bytesSent); r.upload.progress = r.upload.progress / r.upload.totalChunkCount } else for (var a = 0, l = l = e; !(a >= l.length);) { var u = l[a++]; u.upload.progress = i, u.upload.total = n.total, u.upload.bytesSent = n.loaded } for (var d = 0, c = c = e; !(d >= c.length);) { var p = c[d++]; this.emit("uploadprogress", p, p.upload.progress, p.upload.bytesSent) } } else { var h = !0; i = 100; for (var f = 0, m = m = e; !(f >= m.length);) { var v = m[f++]; 100 === v.upload.progress && v.upload.bytesSent === v.upload.total || (h = !1), v.upload.progress = i, v.upload.bytesSent = v.upload.total } if (h) return; for (var g = 0, y = y = e; !(g >= y.length);) { var b = y[g++]; this.emit("uploadprogress", b, i, b.upload.bytesSent) } } } }, { key: "_finishedUploading", value: function (e, t, n) { var i = void 0; if (e[0].status !== o.CANCELED && 4 === t.readyState) { if ("arraybuffer" !== t.responseType && "blob" !== t.responseType && (i = t.responseText, t.getResponseHeader("content-type") && ~t.getResponseHeader("content-type").indexOf("application/json"))) try { i = JSON.parse(i) } catch (e) { n = e, i = "Invalid JSON response from server." } this._updateFilesUploadProgress(e), 200 <= t.status && t.status < 300 ? e[0].upload.chunked ? e[0].upload.finishedChunkUpload(this._getChunk(e[0], t)) : this._finished(e, i, n) : this._handleUploadError(e, t, i) } } }, { key: "_handleUploadError", value: function (e, t, n) { if (e[0].status !== o.CANCELED) { if (e[0].upload.chunked && this.options.retryChunks) { var i = this._getChunk(e[0], t); if (i.retries++ < this.options.retryChunksLimit) return void this._uploadData(e, [i.dataBlock]); console.warn("Retried this chunk too often. Giving up.") } for (var r = 0, s = s = e; !(r >= s.length);)s[r++], this._errorProcessing(e, n || this.options.dictResponseError.replace("{{statusCode}}", t.status), t) } } }, { key: "submitRequest", value: function (e, t, n) { e.send(t) } }, { key: "_finished", value: function (e, t, n) { for (var i = 0, r = r = e; !(i >= r.length);) { var s = r[i++]; s.status = o.SUCCESS, this.emit("success", s, t, n), this.emit("complete", s) } if (this.options.uploadMultiple && (this.emit("successmultiple", e, t, n), this.emit("completemultiple", e)), this.options.autoProcessQueue) return this.processQueue() } }, { key: "_errorProcessing", value: function (e, t, n) { for (var i = 0, r = r = e; !(i >= r.length);) { var s = r[i++]; s.status = o.ERROR, this.emit("error", s, t, n), this.emit("complete", s) } if (this.options.uploadMultiple && (this.emit("errormultiple", e, t, n), this.emit("completemultiple", e)), this.options.autoProcessQueue) return this.processQueue() } }], [{ key: "uuidv4", value: function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) { var t = 16 * Math.random() | 0; return ("x" === e ? t : 3 & t | 8).toString(16) }) } }]), o }(); o.initClass(), o.version = "5.5.1", o.options = {}, o.optionsForElement = function (e) { return e.getAttribute("id") ? o.options[a(e.getAttribute("id"))] : void 0 }, o.instances = [], o.forElement = function (e) { if ("string" == typeof e && (e = document.querySelector(e)), null == (null != e ? e.dropzone : void 0)) throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone."); return e.dropzone }, o.autoDiscover = !0, o.discover = function () { var e = void 0; if (document.querySelectorAll) e = document.querySelectorAll(".dropzone"); else { e = []; var t = function (t) { return function () { for (var n = [], i = 0, r = r = t; !(i >= r.length);) { var o = r[i++]; /(^| )dropzone($| )/.test(o.className) ? n.push(e.push(o)) : n.push(void 0) } return n }() }; t(document.getElementsByTagName("div")), t(document.getElementsByTagName("form")) } return function () { for (var t = [], n = 0, i = i = e; !(n >= i.length);) { var r = i[n++]; !1 !== o.optionsForElement(r) ? t.push(new o(r)) : t.push(void 0) } return t }() }, o.blacklistedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\/12/i], o.isBrowserSupported = function () { var e = !0; if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) if ("classList" in document.createElement("a")) for (var t = 0, n = n = o.blacklistedBrowsers; !(t >= n.length);)n[t++].test(navigator.userAgent) && (e = !1); else e = !1; else e = !1; return e }, o.dataURItoBlob = function (e) { for (var t = atob(e.split(",")[1]), n = e.split(",")[0].split(":")[1].split(";")[0], i = new ArrayBuffer(t.length), r = new Uint8Array(i), o = 0, s = t.length, a = 0 <= s; a ? o <= s : o >= s; a ? o++ : o--)r[o] = t.charCodeAt(o); return new Blob([i], { type: n }) }; var s = function (e, t) { return e.filter(function (e) { return e !== t }).map(function (e) { return e }) }, a = function (e) { return e.replace(/[\-_](\w)/g, function (e) { return e.charAt(1).toUpperCase() }) }; o.createElement = function (e) { var t = document.createElement("div"); return t.innerHTML = e, t.childNodes[0] }, o.elementInside = function (e, t) { if (e === t) return !0; for (; e = e.parentNode;)if (e === t) return !0; return !1 }, o.getElement = function (e, t) { var n = void 0; if ("string" == typeof e ? n = document.querySelector(e) : null != e.nodeType && (n = e), null == n) throw new Error("Invalid `" + t + "` option provided. Please provide a CSS selector or a plain HTML element."); return n }, o.getElements = function (e, t) { var n = void 0, i = void 0; if (_instanceof(e, Array)) { i = []; try { for (var r = 0, o = o = e; !(r >= o.length);)n = o[r++], i.push(this.getElement(n, t)) } catch (e) { i = null } } else if ("string" == typeof e) { i = []; for (var s = 0, a = a = document.querySelectorAll(e); !(s >= a.length);)n = a[s++], i.push(n) } else null != e.nodeType && (i = [e]); if (null == i || !i.length) throw new Error("Invalid `" + t + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those."); return i }, o.confirm = function (e, t, n) { return window.confirm(e) ? t() : null != n ? n() : void 0 }, o.isValidFile = function (e, t) { if (!t) return !0; t = t.split(","); for (var n = e.type, i = n.replace(/\/.*$/, ""), r = 0, o = o = t; !(r >= o.length);) { var s = o[r++]; if ("." === (s = s.trim()).charAt(0)) { if (-1 !== e.name.toLowerCase().indexOf(s.toLowerCase(), e.name.length - s.length)) return !0 } else if (/\/\*$/.test(s)) { if (i === s.replace(/\/.*$/, "")) return !0 } else if (n === s) return !0 } return !1 }, "undefined" != typeof jQuery && null !== jQuery && (jQuery.fn.dropzone = function (e) { return this.each(function () { return new o(this, e) }) }), null !== e ? e.exports = o : window.Dropzone = o, o.ADDED = "added", o.QUEUED = "queued", o.ACCEPTED = o.QUEUED, o.UPLOADING = "uploading", o.PROCESSING = o.UPLOADING, o.CANCELED = "canceled", o.ERROR = "error", o.SUCCESS = "success"; var l = function (e, t, n, i, r, o, s, a, l, u) { var d = function (e) { e.naturalWidth; var t = e.naturalHeight, n = document.createElement("canvas"); n.width = 1, n.height = t; var i = n.getContext("2d"); i.drawImage(e, 0, 0); for (var r = i.getImageData(1, 0, 1, t).data, o = 0, s = t, a = t; a > o;)0 === r[4 * (a - 1) + 3] ? s = a : o = a, a = s + o >> 1; var l = a / t; return 0 === l ? 1 : l }(t); return e.drawImage(t, n, i, r, o, s, a, l, u / d) }, u = function () { function e() { i(this, e) } return t(e, null, [{ key: "initClass", value: function () { this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" } }, { key: "encode64", value: function (e) { for (var t = "", n = void 0, i = void 0, r = "", o = void 0, s = void 0, a = void 0, l = "", u = 0; o = (n = e[u++]) >> 2, s = (3 & n) << 4 | (i = e[u++]) >> 4, a = (15 & i) << 2 | (r = e[u++]) >> 6, l = 63 & r, isNaN(i) ? a = l = 64 : isNaN(r) && (l = 64), t = t + this.KEY_STR.charAt(o) + this.KEY_STR.charAt(s) + this.KEY_STR.charAt(a) + this.KEY_STR.charAt(l), n = i = r = "", o = s = a = l = "", u < e.length;); return t } }, { key: "restore", value: function (e, t) { if (!e.match("data:image/jpeg;base64,")) return t; var n = this.decode64(e.replace("data:image/jpeg;base64,", "")), i = this.slice2Segments(n), r = this.exifManipulation(t, i); return "data:image/jpeg;base64," + this.encode64(r) } }, { key: "exifManipulation", value: function (e, t) { var n = this.getExifArray(t), i = this.insertExif(e, n); return new Uint8Array(i) } }, { key: "getExifArray", value: function (e) { for (var t = void 0, n = 0; n < e.length;) { if (255 === (t = e[n])[0] & 225 === t[1]) return t; n++ } return [] } }, { key: "insertExif", value: function (e, t) { var n = e.replace("data:image/jpeg;base64,", ""), i = this.decode64(n), r = i.indexOf(255, 3), o = i.slice(0, r), s = i.slice(r), a = o; return (a = a.concat(t)).concat(s) } }, { key: "slice2Segments", value: function (e) { for (var t = 0, n = []; !(255 === e[t] & 218 === e[t + 1]);) { if (255 === e[t] & 216 === e[t + 1]) t += 2; else { var i = t + (256 * e[t + 2] + e[t + 3]) + 2, r = e.slice(t, i); n.push(r), t = i } if (t > e.length) break } return n } }, { key: "decode64", value: function (e) { var t = void 0, n = void 0, i = "", r = void 0, o = void 0, s = "", a = 0, l = []; for (/[^A-Za-z0-9\+\/\=]/g.exec(e) && console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."), e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); t = this.KEY_STR.indexOf(e.charAt(a++)) << 2 | (r = this.KEY_STR.indexOf(e.charAt(a++))) >> 4, n = (15 & r) << 4 | (o = this.KEY_STR.indexOf(e.charAt(a++))) >> 2, i = (3 & o) << 6 | (s = this.KEY_STR.indexOf(e.charAt(a++))), l.push(t), 64 !== o && l.push(n), 64 !== s && l.push(i), t = n = i = "", r = o = s = "", a < e.length;); return l } }]), e }(); u.initClass(), o._autoDiscoverFunction = function () { if (o.autoDiscover) return o.discover() }, function (e, t) { var n = !1, i = !0, r = e.document, o = r.documentElement, s = r.addEventListener ? "addEventListener" : "attachEvent", a = r.addEventListener ? "removeEventListener" : "detachEvent", l = r.addEventListener ? "" : "on", u = function i(o) { if ("readystatechange" !== o.type || "complete" === r.readyState) return ("load" === o.type ? e : r)[a](l + o.type, i, !1), !n && (n = !0) ? t.call(e, o.type || o) : void 0 }; if ("complete" !== r.readyState) { if (r.createEventObject && o.doScroll) { try { i = !e.frameElement } catch (e) { } i && function e() { try { o.doScroll("left") } catch (t) { return void setTimeout(e, 50) } return u("poll") }() } r[s](l + "DOMContentLoaded", u, !1), r[s](l + "readystatechange", u, !1), e[s](l + "load", u, !1) } }(window, o._autoDiscoverFunction) }(e = { exports: {} }), e.exports), n = { getSignedURL: function (e, t) { var n = { filePath: e.name, contentType: e.type }; return new Promise(function (i, r) { var o = new FormData, s = new XMLHttpRequest, a = "function" == typeof t.signingURL ? t.signingURL(e) : t.signingURL; s.open("POST", a), s.onload = function () { 200 == s.status ? i(JSON.parse(s.response)) : r(s.statusText) }, s.onerror = function (e) { console.error("Network Error : Could not send request to AWS (Maybe CORS errors)"), r(e) }, !0 === t.withCredentials && (s.withCredentials = !0), Object.entries(t.headers || {}).forEach(function (e) { var t = _slicedToArray(e, 2), n = t[0], i = t[1]; s.setRequestHeader(n, i) }), n = Object.assign(n, t.params || {}), Object.entries(n).forEach(function (e) { var t = _slicedToArray(e, 2), n = t[0], i = t[1]; o.append(n, i) }), s.send(o) }) }, sendFile: function (e, t, n) { var i = n ? this.setResponseHandler : this.sendS3Handler; return this.getSignedURL(e, t).then(function (t) { return i(t, e) }).catch(function (e) { return e }) }, setResponseHandler: function (e, t) { t.s3Signature = e.signature, t.s3Url = e.postEndpoint }, sendS3Handler: function (e, t) { var n = new FormData, i = e.signature; return Object.keys(i).forEach(function (e) { n.append(e, i[e]) }), n.append("file", t), new Promise(function (t, i) { var r = new XMLHttpRequest; r.open("POST", e.postEndpoint), r.onload = function () { if (201 == r.status) { var e = (new window.DOMParser).parseFromString(r.response, "text/xml").firstChild.children[0].innerHTML; t({ success: !0, message: e }) } else { var n = (new window.DOMParser).parseFromString(r.response, "text/xml").firstChild.children[0].innerHTML; i({ success: !1, message: n + ". Request is marked as resolved when returns as status 201" }) } }, r.onerror = function (e) { var t = (new window.DOMParser).parseFromString(r.response, "text/xml").firstChild.children[1].innerHTML; i({ success: !1, message: t }) }, r.send(n) }) } }; return t.autoDiscover = !1, function (e, t, n, i, r, o, s, a, l, u) { "boolean" != typeof s && (a, a = s, s = !1); var d, c = "function" == typeof n ? n.options : n; if (e && e.render && (c.render = e.render, c.staticRenderFns = e.staticRenderFns, c._compiled = !0), d) if (c.functional) { var p = c.render; c.render = function (e, t) { return d.call(t), p(e, t) } } else { var h = c.beforeCreate; c.beforeCreate = h ? [].concat(h, d) : [d] } return n }({ render: function () { var e = this.$createElement, t = this._self._c || e; return t("div", { ref: "dropzoneElement", class: { "vue-dropzone dropzone": this.includeStyling }, attrs: { id: this.id } }, [this.useCustomSlot ? t("div", { staticClass: "dz-message" }, [this._t("default", [this._v("Drop files here to upload")])], 2) : this._e()]) }, staticRenderFns: [] }, 0, { props: { id: { type: String, required: !0, default: "dropzone" }, options: { type: Object, required: !0 }, includeStyling: { type: Boolean, default: !0, required: !1 }, awss3: { type: Object, required: !1, default: null }, destroyDropzone: { type: Boolean, default: !0, required: !1 }, duplicateCheck: { type: Boolean, default: !1, required: !1 }, useCustomSlot: { type: Boolean, default: !1, required: !1 } }, data: function () { return { isS3: !1, isS3OverridesServerPropagation: !1, wasQueueAutoProcess: !0 } }, computed: { dropzoneSettings: function () { var e = { thumbnailWidth: 200, thumbnailHeight: 200 }; return Object.keys(this.options).forEach(function (t) { e[t] = this.options[t] }, this), null !== this.awss3 && (e.autoProcessQueue = !1, this.isS3 = !0, this.isS3OverridesServerPropagation = !1 === this.awss3.sendFileToServer, void 0 !== this.options.autoProcessQueue && (this.wasQueueAutoProcess = this.options.autoProcessQueue), this.isS3OverridesServerPropagation && (e.url = function (e) { return e[0].s3Url })), e } }, mounted: function () { if (!this.$isServer || !this.hasBeenMounted) { this.hasBeenMounted = !0, this.dropzone = new t(this.$refs.dropzoneElement, this.dropzoneSettings); var e = this; this.dropzone.on("thumbnail", function (t, n) { e.$emit("vdropzone-thumbnail", t, n) }), this.dropzone.on("addedfile", function (t) { var n, i; if (e.duplicateCheck && this.files.length) for (n = 0, i = this.files.length; n < i - 1; n++)this.files[n].name === t.name && this.files[n].size === t.size && this.files[n].lastModifiedDate.toString() === t.lastModifiedDate.toString() && (this.removeFile(t), e.$emit("vdropzone-duplicate-file", t)); e.$emit("vdropzone-file-added", t), e.isS3 && e.wasQueueAutoProcess && !t.manuallyAdded && e.getSignedAndUploadToS3(t) }), this.dropzone.on("addedfiles", function (t) { e.$emit("vdropzone-files-added", t) }), this.dropzone.on("removedfile", function (t) { e.$emit("vdropzone-removed-file", t), t.manuallyAdded && null !== e.dropzone.options.maxFiles && e.dropzone.options.maxFiles++ }), this.dropzone.on("success", function (t, n) { if (e.$emit("vdropzone-success", t, n), e.isS3) { if (e.isS3OverridesServerPropagation) { var i = (new window.DOMParser).parseFromString(n, "text/xml").firstChild.children[0].innerHTML; e.$emit("vdropzone-s3-upload-success", i) } e.wasQueueAutoProcess && e.setOption("autoProcessQueue", !1) } }), this.dropzone.on("successmultiple", function (t, n) { e.$emit("vdropzone-success-multiple", t, n) }), this.dropzone.on("error", function (t, n, i) { e.$emit("vdropzone-error", t, n, i), this.isS3 && e.$emit("vdropzone-s3-upload-error") }), this.dropzone.on("errormultiple", function (t, n, i) { e.$emit("vdropzone-error-multiple", t, n, i) }), this.dropzone.on("sending", function (t, n, i) { if (e.isS3) if (e.isS3OverridesServerPropagation) { var r = t.s3Signature; Object.keys(r).forEach(function (e) { i.append(e, r[e]) }) } else i.append("s3ObjectLocation", t.s3ObjectLocation); e.$emit("vdropzone-sending", t, n, i) }), this.dropzone.on("sendingmultiple", function (t, n, i) { e.$emit("vdropzone-sending-multiple", t, n, i) }), this.dropzone.on("complete", function (t) { e.$emit("vdropzone-complete", t) }), this.dropzone.on("completemultiple", function (t) { e.$emit("vdropzone-complete-multiple", t) }), this.dropzone.on("canceled", function (t) { e.$emit("vdropzone-canceled", t) }), this.dropzone.on("canceledmultiple", function (t) { e.$emit("vdropzone-canceled-multiple", t) }), this.dropzone.on("maxfilesreached", function (t) { e.$emit("vdropzone-max-files-reached", t) }), this.dropzone.on("maxfilesexceeded", function (t) { e.$emit("vdropzone-max-files-exceeded", t) }), this.dropzone.on("processing", function (t) { e.$emit("vdropzone-processing", t) }), this.dropzone.on("processingmultiple", function (t) { e.$emit("vdropzone-processing-multiple", t) }), this.dropzone.on("uploadprogress", function (t, n, i) { e.$emit("vdropzone-upload-progress", t, n, i) }), this.dropzone.on("totaluploadprogress", function (t, n, i) { e.$emit("vdropzone-total-upload-progress", t, n, i) }), this.dropzone.on("reset", function () { e.$emit("vdropzone-reset") }), this.dropzone.on("queuecomplete", function () { e.$emit("vdropzone-queue-complete") }), this.dropzone.on("drop", function (t) { e.$emit("vdropzone-drop", t) }), this.dropzone.on("dragstart", function (t) { e.$emit("vdropzone-drag-start", t) }), this.dropzone.on("dragend", function (t) { e.$emit("vdropzone-drag-end", t) }), this.dropzone.on("dragenter", function (t) { e.$emit("vdropzone-drag-enter", t) }), this.dropzone.on("dragover", function (t) { e.$emit("vdropzone-drag-over", t) }), this.dropzone.on("dragleave", function (t) { e.$emit("vdropzone-drag-leave", t) }), e.$emit("vdropzone-mounted") } }, beforeDestroy: function () { this.destroyDropzone && this.dropzone.destroy() }, methods: { manuallyAddFile: function (e, t) { e.manuallyAdded = !0, this.dropzone.emit("addedfile", e); var n = !1; if ((t.indexOf(".svg") > -1 || t.indexOf(".png") > -1 || t.indexOf(".jpg") > -1 || t.indexOf(".jpeg") > -1 || t.indexOf(".gif") > -1 || t.indexOf(".webp") > -1) && (n = !0), this.dropzone.options.createImageThumbnails && n && e.size <= 1024 * this.dropzone.options.maxThumbnailFilesize * 1024) { t && this.dropzone.emit("thumbnail", e, t); for (var i = e.previewElement.querySelectorAll("[data-dz-thumbnail]"), r = 0; r < i.length; r++)i[r].style.width = this.dropzoneSettings.thumbnailWidth + "px", i[r].style.height = this.dropzoneSettings.thumbnailHeight + "px", i[r].style["object-fit"] = "contain" } this.dropzone.emit("complete", e), this.dropzone.options.maxFiles && this.dropzone.options.maxFiles--, this.dropzone.files.push(e), this.$emit("vdropzone-file-added-manually", e) }, setOption: function (e, t) { this.dropzone.options[e] = t }, removeAllFiles: function (e) { this.dropzone.removeAllFiles(e) }, processQueue: function () { var e = this, t = this.dropzone; this.isS3 && !this.wasQueueAutoProcess ? this.getQueuedFiles().forEach(function (t) { e.getSignedAndUploadToS3(t) }) : this.dropzone.processQueue(), this.dropzone.on("success", function () { t.options.autoProcessQueue = !0 }), this.dropzone.on("queuecomplete", function () { t.options.autoProcessQueue = !1 }) }, init: function () { return this.dropzone.init() }, destroy: function () { return this.dropzone.destroy() }, updateTotalUploadProgress: function () { return this.dropzone.updateTotalUploadProgress() }, getFallbackForm: function () { return this.dropzone.getFallbackForm() }, getExistingFallback: function () { return this.dropzone.getExistingFallback() }, setupEventListeners: function () { return this.dropzone.setupEventListeners() }, removeEventListeners: function () { return this.dropzone.removeEventListeners() }, disable: function () { return this.dropzone.disable() }, enable: function () { return this.dropzone.enable() }, filesize: function (e) { return this.dropzone.filesize(e) }, accept: function (e, t) { return this.dropzone.accept(e, t) }, addFile: function (e) { return this.dropzone.addFile(e) }, removeFile: function (e) { this.dropzone.removeFile(e) }, getAcceptedFiles: function () { return this.dropzone.getAcceptedFiles() }, getRejectedFiles: function () { return this.dropzone.getRejectedFiles() }, getFilesWithStatus: function () { return this.dropzone.getFilesWithStatus() }, getQueuedFiles: function () { return this.dropzone.getQueuedFiles() }, getUploadingFiles: function () { return this.dropzone.getUploadingFiles() }, getAddedFiles: function () { return this.dropzone.getAddedFiles() }, getActiveFiles: function () { return this.dropzone.getActiveFiles() }, getSignedAndUploadToS3: function (e) { var t = this, i = n.sendFile(e, this.awss3, this.isS3OverridesServerPropagation); this.isS3OverridesServerPropagation ? i.then(function () { setTimeout(function () { return t.dropzone.processFile(e) }) }) : i.then(function (n) { n.success ? (e.s3ObjectLocation = n.message, setTimeout(function () { return t.dropzone.processFile(e) }), t.$emit("vdropzone-s3-upload-success", n.message)) : void 0 !== n.message ? t.$emit("vdropzone-s3-upload-error", n.message) : t.$emit("vdropzone-s3-upload-error", "Network Error : Could not send request to AWS. (Maybe CORS error)") }), i.catch(function (e) { alert(e) }) }, setAWSSigningURL: function (e) { this.isS3 && (this.awss3.signingURL = e) } } }, 0, 0, 0, void 0, void 0) });